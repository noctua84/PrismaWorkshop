// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator markdown {
  provider = "prisma-markdown"
  output   = "../documentation/ERD.md"
  title    = "Prisma Workshop ERD"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  role      Role     @default(USER)
  profile   Profile?
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map(name: "users") // This is the name of the table in the database
}

model Profile {
  id        Int      @id @default(autoincrement())
  bio       String?
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map(name: "profiles") // This is the name of the table in the database
}

model Post {
  id         Int            @id @default(autoincrement())
  title      String
  content    String?
  likes      Int            @default(0)
  published  Boolean        @default(false)
  author     User?          @relation(fields: [authorId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  authorId   Int?
  categories PostCategory[]
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@map(name: "posts") // This is the name of the table in the database
}

model Category {
  id        Int            @id @default(autoincrement())
  name      String
  posts     PostCategory[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@map(name: "categories") // This is the name of the table in the database
}

model PostCategory {
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId     Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId Int

  @@id([postId, categoryId])
  @@map(name: "posts_categories") // This is the name of the table in the database
}
